using System;
using System.Diagnostics;
using System.Management;
using Microsoft.Win32;
using System.ServiceProcess;

namespace Moriarty.Msrc
{
    internal static class CVE_2021_1675
    {
        private const string Id = "PrintNightmare (CVE-2021-1675, CVE-2021-34527)";
        private const int OldestPrinterPatch = 5003635;
        private static readonly string[] Exploits = new[]
        {
            "https://github.com/xbufu/PrintNightmareCheck/tree/main"
        };

        public static Vulnerability GetVulnerability()
        {
            return new Vulnerability(Id, Exploits);
        }
        public static void Check(VulnerabilityCollection vulnerabilities)
        {
            DebugUtility.DebugPrint("Performing Print Spooler vulnerability checks...");

            if (CheckSpoolerService())
            {
                if (CheckPatchStatus())
                {
                    if (CheckRegistrySettings())
                    {
                        vulnerabilities.SetAsVulnerable(Id);
                    }
                }
            }
        }

        private static bool CheckSpoolerService()
        {
            try
            {
                using (ServiceController sc = new ServiceController("Spooler"))
                {
                    switch (sc.Status)
                    {
                        case ServiceControllerStatus.Running:
                            DebugUtility.DebugPrint("Print Spooler service is ENABLED and RUNNING.");
                            return true;
                        case ServiceControllerStatus.Stopped:
                            DebugUtility.DebugPrint("Print Spooler service is ENABLED but STOPPED.");
                            return true;
                        default:
                            DebugUtility.DebugPrint("Print Spooler service status is UNKNOWN.");
                            return false;
                    }
                }
            }
            catch (InvalidOperationException ex)
            {
                DebugUtility.DebugPrint($"Print Spooler service is not installed: {ex.Message}");
                return false;
            }
            catch (Exception ex)
            {
                DebugUtility.DebugPrint($"An error occurred while checking Print Spooler service: {ex.Message}");
                return false;
            }
        }

        private static bool CheckPatchStatus()
        {
            DebugUtility.DebugPrint("Checking if system has security patches applied...");
            try
            {
                using (var searcher = new ManagementObjectSearcher("root\\CIMV2", "SELECT HotFixID FROM Win32_QuickFixEngineering WHERE Description = 'Security Update'"))
                {
                    var patches = searcher.Get();
                    var latestPatch = 0;
                    foreach (ManagementObject patch in patches)
                    {
                        var hotFixId = patch["HotFixID"] as string;
                        if (int.TryParse(hotFixId?.Substring(2), out var patchNumber) && patchNumber > latestPatch)
                        {
                            latestPatch = patchNumber;
                        }
                    }

                    DebugUtility.DebugPrint($"Latest security patch: KB{latestPatch}.");
                    if (latestPatch >= OldestPrinterPatch)
                    {
                        DebugUtility.DebugPrint("System is PATCHED but might still be vulnerable.");
                        return true;
                    }
                    else
                    {
                        DebugUtility.DebugPrint("System is NOT PATCHED and most likely VULNERABLE!");
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                DebugUtility.DebugPrint($"An error occurred while checking for patches: {ex.Message}");
                return false;
            }
        }

        private static bool CheckRegistrySettings()
        {
            DebugUtility.DebugPrint("Checking registry settings...");

            var keyPath = @"SOFTWARE\Policies\Microsoft\Windows NT\Printers\PointAndPrint";
            using (var key = Registry.LocalMachine.OpenSubKey(keyPath))
            {
                if (key == null)
                {
                    DebugUtility.DebugPrint("Registry setting does not exist. System is likely NOT VULNERABLE.");
                    return false;
                }

                DebugUtility.DebugPrint("Registry setting exists!");

                var noWarningNoElevationOnInstall = key.GetValue("NoWarningNoElevationOnInstall", -1);
                var updatePromptSettings = key.GetValue("UpdatePromptSettings", -1);

                DebugUtility.DebugPrint($"NoWarningNoElevationOnInstall: {noWarningNoElevationOnInstall}");
                DebugUtility.DebugPrint($"UpdatePromptSettings: {updatePromptSettings}");

                if (noWarningNoElevationOnInstall.Equals(1) || updatePromptSettings.Equals(1))
                {
                    DebugUtility.DebugPrint("System is likely VULNERABLE!");
                    return true;
                }
                else
                {
                    DebugUtility.DebugPrint("System is likely NOT VULNERABLE.");
                    return false;
                }
            }
        }
    }
}